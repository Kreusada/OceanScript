import unittest

from oceanscript import encode


class DecoderTest(unittest.TestCase):
    def test_ascii_lowercase(self):
        self.assertEqual(encode("a"), "^<.")
        self.assertEqual(encode("b"), "^-.")
        self.assertEqual(encode("c"), "^>.")
        self.assertEqual(encode("d"), "~<.")
        self.assertEqual(encode("e"), "~-.")
        self.assertEqual(encode("f"), "~>.")
        self.assertEqual(encode("g"), "_<.")
        self.assertEqual(encode("h"), "_-.")
        self.assertEqual(encode("i"), "_>.")
        self.assertEqual(encode("j"), "^<..")
        self.assertEqual(encode("k"), "^-..")
        self.assertEqual(encode("l"), "^>..")
        self.assertEqual(encode("m"), "~<..")
        self.assertEqual(encode("n"), "~-..")
        self.assertEqual(encode("o"), "~>..")
        self.assertEqual(encode("p"), "_<..")
        self.assertEqual(encode("q"), "_-..")
        self.assertEqual(encode("r"), "_>..")
        self.assertEqual(encode("s"), "^<...")
        self.assertEqual(encode("t"), "^-...")
        self.assertEqual(encode("u"), "^>...")
        self.assertEqual(encode("v"), "~<...")
        self.assertEqual(encode("w"), "~-...")
        self.assertEqual(encode("x"), "~>...")
        self.assertEqual(encode("y"), "_<...")
        self.assertEqual(encode("z"), "_-...")

    def test_ascii_uppercase(self):
        self.assertEqual(encode("A"), "*^<.")
        self.assertEqual(encode("B"), "*^-.")
        self.assertEqual(encode("C"), "*^>.")
        self.assertEqual(encode("D"), "*~<.")
        self.assertEqual(encode("E"), "*~-.")
        self.assertEqual(encode("F"), "*~>.")
        self.assertEqual(encode("G"), "*_<.")
        self.assertEqual(encode("H"), "*_-.")
        self.assertEqual(encode("I"), "*_>.")
        self.assertEqual(encode("J"), "*^<..")
        self.assertEqual(encode("K"), "*^-..")
        self.assertEqual(encode("L"), "*^>..")
        self.assertEqual(encode("M"), "*~<..")
        self.assertEqual(encode("N"), "*~-..")
        self.assertEqual(encode("O"), "*~>..")
        self.assertEqual(encode("P"), "*_<..")
        self.assertEqual(encode("Q"), "*_-..")
        self.assertEqual(encode("R"), "*_>..")
        self.assertEqual(encode("S"), "*^<...")
        self.assertEqual(encode("T"), "*^-...")
        self.assertEqual(encode("U"), "*^>...")
        self.assertEqual(encode("V"), "*~<...")
        self.assertEqual(encode("W"), "*~-...")
        self.assertEqual(encode("X"), "*~>...")
        self.assertEqual(encode("Y"), "*_<...")
        self.assertEqual(encode("Z"), "*_-...")

    def test_ascii_digits(self):
        self.assertEqual(encode("0"), "_>...")
        self.assertEqual(encode("1"), "^<....")
        self.assertEqual(encode("2"), "^-....")
        self.assertEqual(encode("3"), "^>....")
        self.assertEqual(encode("4"), "~<....")
        self.assertEqual(encode("5"), "~-....")
        self.assertEqual(encode("6"), "~>....")
        self.assertEqual(encode("7"), "_<....")
        self.assertEqual(encode("8"), "_-....")
        self.assertEqual(encode("9"), "_>....")

    def test_decoding_stretch_mode(self):
        sencode = lambda x: encode(x, mode="stretch")
        self.assertEqual(sencode("QpLl GfHmE"), "*_-.._<..*^>..^>..\n*_<.~>.*_-.~<..*~-.")
        self.assertEqual(sencode("UdMv WlPlZ"), "*^>...~<.*~<..~<...\n*~-...^>..*_<..^>..*_-...")
        self.assertEqual(sencode("WnVx VfZeW"), "*~-...~-..*~<...~>...\n*~<...~>.*_-...~-.*~-...")
        self.assertEqual(sencode("FsDi MnBtW"), "*~>.^<...*~<._>.\n*~<..~-..*^-.^-...*~-...")
        self.assertEqual(sencode("ZsPb ZdKkX"), "*_-...^<...*_<..^-.\n*_-...~<.*^-..^-..*~>...")
        self.assertEqual(sencode("SrFc VxBtT"), "*^<..._>..*~>.^>.\n*~<...~>...*^-.^-...*^-...")
        self.assertEqual(sencode("BtZf TcTvQ"), "*^-.^-...*_-...~>.\n*^-...^>.*^-...~<...*_-..")
        self.assertEqual(sencode("KgOj BqBqZ"), "*^-.._<.*~>..^<..\n*^-._-..*^-._-..*_-...")
        self.assertEqual(sencode("AiIn YnQxF"), "*^<._>.*_>.~-..\n*_<...~-..*_-..~>...*~>.")
        self.assertEqual(sencode("GcGr LzTuH"), "*_<.^>.*_<._>..\n*^>.._-...*^-...^>...*_-.")
        self.assertEqual(sencode("VrWc YnNwR"), "*~<..._>..*~-...^>.\n*_<...~-..*~-..~-...*_>..")
        self.assertEqual(sencode("YkMv AmWzD"), "*_<...^-..*~<..~<...\n*^<.~<..*~-..._-...*~<.")
        self.assertEqual(sencode("LnHs LnJyK"), "*^>..~-..*_-.^<...\n*^>..~-..*^<.._<...*^-..")
        self.assertEqual(sencode("YeHa GzZdM"), "*_<...~-.*_-.^<.\n*_<._-...*_-...~<.*~<..")
        self.assertEqual(sencode("ZsPj UjWmT"), "*_-...^<...*_<..^<..\n*^>...^<..*~-...~<..*^-...")
        self.assertEqual(sencode("InQe IgSqQ"), "*_>.~-..*_-..~-.\n*_>._<.*^<..._-..*_-..")
        self.assertEqual(sencode("AtAe FaMvT"), "*^<.^-...*^<.~-.\n*~>.^<.*~<..~<...*^-...")
        self.assertEqual(sencode("SvBv InGeI"), "*^<...~<...*^-.~<...\n*_>.~-..*_<.~-.*_>.")
        self.assertEqual(sencode("KcFw PbPdH"), "*^-..^>.*~>.~-...\n*_<..^-.*_<..~<.*_-.")
        self.assertEqual(sencode("NjBe ItZfX"), "*~-..^<..*^-.~-.\n*_>.^-...*_-...~>.*~>...")

    def test_decoding_squash_mode(self):
        # default mode == squash
        self.assertEqual(encode("JrZr DoThM"), "*^<.._>..*_-..._>..,*~<.~>..*^-..._-.*~<..")
        self.assertEqual(encode("WlRz XbNtN"), "*~-...^>..*_>.._-...,*~>...^-.*~-..^-...*~-..")
        self.assertEqual(encode("KgTk XiJgB"), "*^-.._<.*^-...^-..,*~>..._>.*^<.._<.*^-.")
        self.assertEqual(encode("NuRp WuOrV"), "*~-..^>...*_>.._<..,*~-...^>...*~>.._>..*~<...")
        self.assertEqual(encode("MxNh PxCtA"), "*~<..~>...*~-.._-.,*_<..~>...*^>.^-...*^<.")
        self.assertEqual(encode("JgAp WtGiW"), "*^<.._<.*^<._<..,*~-...^-...*_<._>.*~-...")
        self.assertEqual(encode("CuRl TyUaB"), "*^>.^>...*_>..^>..,*^-..._<...*^>...^<.*^-.")
        self.assertEqual(encode("OiOf RdQaL"), "*~>.._>.*~>..~>.,*_>..~<.*_-..^<.*^>..")
        self.assertEqual(encode("QfTp WjMiX"), "*_-..~>.*^-..._<..,*~-...^<..*~<.._>.*~>...")
        self.assertEqual(encode("XeDw KoOsO"), "*~>...~-.*~<.~-...,*^-..~>..*~>..^<...*~>..")
        self.assertEqual(encode("HaEz MbZtT"), "*_-.^<.*~-._-...,*~<..^-.*_-...^-...*^-...")
        self.assertEqual(encode("DuVk QwGfY"), "*~<.^>...*~<...^-..,*_-..~-...*_<.~>.*_<...")
        self.assertEqual(encode("EfPl FiJgB"), "*~-.~>.*_<..^>..,*~>._>.*^<.._<.*^-.")
        self.assertEqual(encode("JiFy QoHmJ"), "*^<.._>.*~>._<...,*_-..~>..*_-.~<..*^<..")
        self.assertEqual(encode("FmBe WzAsK"), "*~>.~<..*^-.~-.,*~-..._-...*^<.^<...*^-..")
        self.assertEqual(encode("YaCl OmKiM"), "*_<...^<.*^>.^>..,*~>..~<..*^-.._>.*~<..")
        self.assertEqual(encode("YkUr FrOqZ"), "*_<...^-..*^>..._>..,*~>._>..*~>.._-..*_-...")
        self.assertEqual(encode("XdCl NrGdM"), "*~>...~<.*^>.^>..,*~-.._>..*_<.~<.*~<..")
        self.assertEqual(encode("HzIh KaRgG"), "*_-._-...*_>._-.,*^-..^<.*_>.._<.*_<.")
        self.assertEqual(encode("PcNv BcSqT"), "*_<..^>.*~-..~<...,*^-.^>.*^<..._-..*^-...")

    def test_decoding_1_to_9(self):
        self.assertEqual(encode("91349159734354"), "_>o^<o^>o~<o_>o^<o~-o_>o_<o^>o~<o^>o~-o~<o")
        self.assertEqual(encode("59825223719336"), "~-o_>o_-o^-o~-o^-o^-o^>o_<o^<o_>o^>o^>o~>o")
        self.assertEqual(encode("89682124691119"), "_-o_>o~>o_-o^-o^<o^-o~<o~>o_>o^<o^<o^<o_>o")
        self.assertEqual(encode("94151468699191"), "_>o~<o^<o~-o^<o~<o~>o_-o~>o_>o_>o^<o_>o^<o")
        self.assertEqual(encode("64883897994575"), "~>o~<o_-o_-o^>o_-o_>o_<o_>o_>o~<o~-o_<o~-o")
        self.assertEqual(encode("66662929188752"), "~>o~>o~>o~>o^-o_>o^-o_>o^<o_-o_-o_<o~-o^-o")
        self.assertEqual(encode("98533939938662"), "_>o_-o~-o^>o^>o_>o^>o_>o_>o^>o_-o~>o~>o^-o")
        self.assertEqual(encode("24241989875245"), "^-o~<o^-o~<o^<o_>o_-o_>o_-o_<o~-o^-o~<o~-o")
        self.assertEqual(encode("79327442696661"), "_<o_>o^>o^-o_<o~<o~<o^-o~>o_>o~>o~>o~>o^<o")
        self.assertEqual(encode("86383867784997"), "_-o~>o^>o_-o^>o_-o~>o_<o_<o_-o~<o_>o_>o_<o")
        self.assertEqual(encode("86533569192795"), "_-o~>o~-o^>o^>o~-o~>o_>o^<o_>o^-o_<o_>o~-o")
        self.assertEqual(encode("46957759739384"), "~<o~>o_>o~-o_<o_<o~-o_>o_<o^>o_>o^>o_-o~<o")
        self.assertEqual(encode("68466427892371"), "~>o_-o~<o~>o~>o~<o^-o_<o_-o_>o^-o^>o_<o^<o")
        self.assertEqual(encode("91499655331691"), "_>o^<o~<o_>o_>o~>o~-o~-o^>o^>o^<o~>o_>o^<o")
        self.assertEqual(encode("99983494292912"), "_>o_>o_>o_-o^>o~<o_>o~<o^-o_>o^-o_>o^<o^-o")
        self.assertEqual(encode("69663765659978"), "~>o_>o~>o~>o^>o_<o~>o~-o~>o~-o_>o_>o_<o_-o")
        self.assertEqual(encode("25449518986623"), "^-o~-o~<o~<o_>o~-o^<o_-o_>o_-o~>o~>o^-o^>o")
        self.assertEqual(encode("78439949875919"), "_<o_-o~<o^>o_>o_>o~<o_>o_-o_<o~-o_>o^<o_>o")
        self.assertEqual(encode("88567955899878"), "_-o_-o~-o~>o_<o_>o~-o~-o_-o_>o_>o_-o_<o_-o")
        self.assertEqual(encode("65152191232691"), "~>o~-o^<o~-o^-o^<o_>o^<o^-o^>o^-o~>o_>o^<o")